// Code generated by the Encore v1.49.3 client generator. DO NOT EDIT.

// Disable eslint, jshint, and jslint for this file.
/* eslint-disable */
/* jshint ignore:start */
/*jslint-disable*/

/**
 * BaseURL is the base URL for calling the Encore application's API.
 */
export type BaseURL = string

export const Local: BaseURL = "http://localhost:4000"

/**
 * Environment returns a BaseURL for calling the cloud environment with the given name.
 */
export function Environment(name: string): BaseURL {
    return `https://${name}-vaquinha-social-frontend-uo9i.encr.app`
}

/**
 * PreviewEnv returns a BaseURL for calling the preview environment with the given PR number.
 */
export function PreviewEnv(pr: number | string): BaseURL {
    return Environment(`pr${pr}`)
}

const BROWSER = typeof globalThis === "object" && ("window" in globalThis);

/**
 * Client is an API client for the vaquinha-social-frontend-uo9i Encore application.
 */
export default class Client {
    public readonly announcements: announcements.ServiceClient
    public readonly companies: companies.ServiceClient
    public readonly frontend: frontend.ServiceClient
    public readonly manifesto: manifesto.ServiceClient
    public readonly payments: payments.ServiceClient
    public readonly user: user.ServiceClient
    private readonly options: ClientOptions
    private readonly target: string


    /**
     * Creates a Client for calling the public and authenticated APIs of your Encore application.
     *
     * @param target  The target which the client should be configured to use. See Local and Environment for options.
     * @param options Options for the client
     */
    constructor(target: BaseURL, options?: ClientOptions) {
        this.target = target
        this.options = options ?? {}
        const base = new BaseClient(this.target, this.options)
        this.announcements = new announcements.ServiceClient(base)
        this.companies = new companies.ServiceClient(base)
        this.frontend = new frontend.ServiceClient(base)
        this.manifesto = new manifesto.ServiceClient(base)
        this.payments = new payments.ServiceClient(base)
        this.user = new user.ServiceClient(base)
    }

    /**
     * Creates a new Encore client with the given client options set.
     *
     * @param options Client options to set. They are merged with existing options.
     **/
    public with(options: ClientOptions): Client {
        return new Client(this.target, {
            ...this.options,
            ...options,
        })
    }
}

/**
 * ClientOptions allows you to override any default behaviour within the generated Encore client.
 */
export interface ClientOptions {
    /**
     * By default the client will use the inbuilt fetch function for making the API requests.
     * however you can override it with your own implementation here if you want to run custom
     * code on each API request made or response received.
     */
    fetcher?: Fetcher

    /** Default RequestInit to be used for the client */
    requestInit?: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }

    /**
     * Allows you to set the authentication data to be used for each
     * request either by passing in a static object or by passing in
     * a function which returns a new object for each request.
     */
    auth?: auth.AuthParams | AuthDataGenerator
}

export namespace announcements {
    export interface AnnouncementDetail {
        id: number
        slug: string
        title: string
        description: string
        content: string
        category: string
        location: string
        organizationName: string
        organizationDescription?: string
        goalAmount: number
        raisedAmount: number
        backersCount: number
        imageUrl?: string
        published: boolean
        createdAt: string
        updatedAt: string
        campaignEndDate: string
        defaultLanguage: string
    }

    export interface AnnouncementSummary {
        id: number
        slug: string
        title: string
        description: string
        category: string
        location: string
        organizationName: string
        goalAmount: number
        raisedAmount: number
        backersCount: number
        imageUrl?: string
        createdAt: string
        campaignEndDate: string
        defaultLanguage: string
    }

    export interface BackAnnouncementRequest {
        announcementId: number
        amount: number
    }

    export interface BackResponse {
        success: boolean
    }

    export interface GetBySlugRequest {
        language?: string
    }

    export interface ListAnnouncementsRequest {
        search?: string
        category?: string
        location?: string
        minGoal?: number
        maxGoal?: number
        sortBy?: "newest" | "goal-asc" | "goal-desc" | "progress" | "relevance"
        limit?: number
        offset?: number
        language?: string
    }

    export interface ListPublishedResponse {
        announcements: AnnouncementSummary[]
        total: number
    }

    export interface RemindAnnouncementRequest {
        announcementId: number
    }

    export interface RemindResponse {
        success: boolean
    }

    export interface SeedResponse {
        success: boolean
        count: number
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.back = this.back.bind(this)
            this.getBySlug = this.getBySlug.bind(this)
            this.listPublished = this.listPublished.bind(this)
            this.remind = this.remind.bind(this)
            this.seed = this.seed.bind(this)
        }

        /**
         * Backs an announcement with a monetary contribution.
         */
        public async back(params: BackAnnouncementRequest): Promise<BackResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/announcements/back`, JSON.stringify(params))
            return await resp.json() as BackResponse
        }

        /**
         * Retrieves a published announcement by its slug with optional language support.
         */
        public async getBySlug(slug: string, params: GetBySlugRequest): Promise<AnnouncementDetail> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                language: params.language,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/announcements/${encodeURIComponent(slug)}`, undefined, {query})
            return await resp.json() as AnnouncementDetail
        }

        /**
         * Lists all published announcements with filtering and search capabilities.
         */
        public async listPublished(params: ListAnnouncementsRequest): Promise<ListPublishedResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                category: params.category,
                language: params.language,
                limit:    params.limit === undefined ? undefined : String(params.limit),
                location: params.location,
                maxGoal:  params.maxGoal === undefined ? undefined : String(params.maxGoal),
                minGoal:  params.minGoal === undefined ? undefined : String(params.minGoal),
                offset:   params.offset === undefined ? undefined : String(params.offset),
                search:   params.search,
                sortBy:   params.sortBy === undefined ? undefined : String(params.sortBy),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/announcements`, undefined, {query})
            return await resp.json() as ListPublishedResponse
        }

        /**
         * Sets a reminder for an announcement.
         */
        public async remind(params: RemindAnnouncementRequest): Promise<RemindResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/announcements/remind`, JSON.stringify(params))
            return await resp.json() as RemindResponse
        }

        /**
         * Seeds the database with sample announcements and translations (restricted endpoint).
         */
        public async seed(): Promise<SeedResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/announcements/seed`)
            return await resp.json() as SeedResponse
        }
    }
}

export namespace auth {
    export interface AuthParams {
        authorization?: string
    }
}

export namespace companies {
    export interface AddCommentRequest {
        content: string
    }

    export interface AddCommentResponse {
        comment: PostComment
    }

    export interface Company {
        id: number
        name: string
        type: "ngo" | "company"
        "registration_number": string
        category: string
        email: string
        phone: string
        website?: string
        address: string
        city: string
        state?: string
        "zip_code"?: string
        country: string
        description: string
        mission: string
        impact: string
        "target_audience"?: string
        "owner_id": string
        status: "pending" | "approved" | "rejected"
        "is_non_profit": boolean
        "voting_start_date"?: string
        "voting_end_date"?: string
        "voting_ends_at"?: string
        "votes_yes": number
        "votes_no": number
        "votes_abstain": number
        "created_at": string
        "updated_at": string
        "approved_at"?: string
    }

    export interface CompanyDocument {
        id: number
        "company_id": number
        "document_type": "legal" | "financial" | "reports" | "certificates" | "other"
        "file_name": string
        "file_url": string
        "file_size": number
        "mime_type"?: string
        "uploaded_at": string
    }

    export interface CompanyImage {
        id: number
        "company_id": number
        "image_url": string
        "image_type"?: string
        "is_primary": boolean
        "uploaded_at": string
    }

    export interface CompanyProfile {
        id: number
        "company_id": number
        presentation?: string
        "logo_url"?: string
        "cover_image_url"?: string
        "social_media"?: { [key: string]: string }
        "team_members"?: any[]
        statistics?: { [key: string]: any }
        "updated_at": string
    }

    export interface CreatePostRequest {
        content: string
        image?: {
            filename: string
            data: string
            contentType: string
        }
    }

    export interface CreatePostResponse {
        post: Post
    }

    export interface GetCommentsRequest {
        limit?: number
        offset?: number
    }

    export interface GetCommentsResponse {
        comments: PostComment[]
        total: number
    }

    export interface GetCompaniesRequest {
        status?: "pending" | "approved" | "rejected"
        type?: "ngo" | "company"
        category?: string
        "owner_id"?: string
        limit?: number
        offset?: number
    }

    export interface GetCompaniesResponse {
        companies: {
            id: number
            name: string
            type: "ngo" | "company"
            "registration_number": string
            category: string
            email: string
            phone: string
            website?: string
            address: string
            city: string
            state?: string
            "zip_code"?: string
            country: string
            description: string
            mission: string
            impact: string
            "target_audience"?: string
            "owner_id": string
            status: "pending" | "approved" | "rejected"
            "is_non_profit": boolean
            "voting_start_date"?: string
            "voting_end_date"?: string
            "voting_ends_at"?: string
            "votes_yes": number
            "votes_no": number
            "votes_abstain": number
            "created_at": string
            "updated_at": string
            "approved_at"?: string
            documents?: CompanyDocument[]
            images?: CompanyImage[]
            profile?: CompanyProfile
        }[]
        total: number
    }

    export interface GetCompanyResponse {
        company: Company
        documents: CompanyDocument[]
        images: CompanyImage[]
        profile?: CompanyProfile
        "can_edit": boolean
    }

    export interface GetPostsRequest {
        limit?: number
        offset?: number
    }

    export interface GetPostsResponse {
        posts: Post[]
        total: number
    }

    export interface LikePostResponse {
        success: boolean
        "likes_count": number
    }

    export interface Post {
        id: number
        "company_id": number
        "author_id": string
        "author_name": string
        "author_avatar"?: string
        content: string
        "image_url"?: string
        "created_at": string
        "updated_at": string
        "likes_count"?: number
        "comments_count"?: number
        "has_liked"?: boolean
    }

    export interface PostComment {
        id: number
        "post_id": number
        "user_id": string
        "user_name": string
        "user_avatar"?: string
        content: string
        "created_at": string
    }

    export interface RegisterCompanyRequest {
        name: string
        type: "ngo" | "company"
        "registration_number": string
        category: string
        email: string
        phone: string
        website?: string
        address: string
        city: string
        state?: string
        "zip_code"?: string
        country: string
        description: string
        mission: string
        impact: string
        "target_audience"?: string
        "is_non_profit": boolean
        documents?: {
            filename: string
            data: string
            "document_type": string
        }[]
        images?: {
            filename: string
            data: string
        }[]
    }

    export interface RegisterCompanyResponse {
        company: Company
        message: string
    }

    export interface UpdateCompanyProfileRequest {
        "user_id": string
        presentation?: string
        "logo_url"?: string
        "cover_image_url"?: string
        "social_media"?: { [key: string]: string }
        "team_members"?: any[]
        statistics?: { [key: string]: any }
    }

    export interface UpdateCompanyProfileResponse {
        profile: CompanyProfile
        message: string
    }

    export interface UpdateCompanyRequest {
        "user_id": string
        name?: string
        email?: string
        phone?: string
        website?: string
        address?: string
        city?: string
        state?: string
        "zip_code"?: string
        country?: string
        description?: string
        mission?: string
        impact?: string
        "target_audience"?: string
    }

    export interface UpdateCompanyResponse {
        company: Company
        message: string
    }

    export interface UploadImageRequest {
        filename: string
        data: string
        contentType: string
    }

    export interface UploadImageResponse {
        url: string
    }

    export interface VoteOnCompanyRequest {
        "vote_type": "yes" | "no" | "abstain"
    }

    export interface VoteOnCompanyResponse {
        message: string
        votes: {
            yes: number
            no: number
            abstain: number
        }
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.addComment = this.addComment.bind(this)
            this.createPost = this.createPost.bind(this)
            this.getComments = this.getComments.bind(this)
            this.getCompanies = this.getCompanies.bind(this)
            this.getCompany = this.getCompany.bind(this)
            this.getPosts = this.getPosts.bind(this)
            this.likePost = this.likePost.bind(this)
            this.registerCompany = this.registerCompany.bind(this)
            this.updateCompany = this.updateCompany.bind(this)
            this.updateCompanyProfile = this.updateCompanyProfile.bind(this)
            this.uploadImage = this.uploadImage.bind(this)
            this.voteOnCompany = this.voteOnCompany.bind(this)
        }

        /**
         * API: Add a comment to a post
         */
        public async addComment(post_id: number, params: AddCommentRequest): Promise<AddCommentResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/posts/${encodeURIComponent(post_id)}/comments`, JSON.stringify(params))
            return await resp.json() as AddCommentResponse
        }

        /**
         * API: Create a new post (only company owner)
         */
        public async createPost(company_id: number, params: CreatePostRequest): Promise<CreatePostResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/companies/${encodeURIComponent(company_id)}/posts`, JSON.stringify(params))
            return await resp.json() as CreatePostResponse
        }

        /**
         * API: Get comments for a post
         */
        public async getComments(post_id: number, params: GetCommentsRequest): Promise<GetCommentsResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit:  params.limit === undefined ? undefined : String(params.limit),
                offset: params.offset === undefined ? undefined : String(params.offset),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/posts/${encodeURIComponent(post_id)}/comments`, undefined, {query})
            return await resp.json() as GetCommentsResponse
        }

        /**
         * API: Get companies list
         */
        public async getCompanies(params: GetCompaniesRequest): Promise<GetCompaniesResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                category:   params.category,
                limit:      params.limit === undefined ? undefined : String(params.limit),
                offset:     params.offset === undefined ? undefined : String(params.offset),
                "owner_id": params["owner_id"],
                status:     params.status === undefined ? undefined : String(params.status),
                type:       params.type === undefined ? undefined : String(params.type),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/companies`, undefined, {query})
            return await resp.json() as GetCompaniesResponse
        }

        /**
         * API: Get single company details
         */
        public async getCompany(id: number): Promise<GetCompanyResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/companies/${encodeURIComponent(id)}`)
            return await resp.json() as GetCompanyResponse
        }

        /**
         * API: Get posts for a company
         */
        public async getPosts(company_id: number, params: GetPostsRequest): Promise<GetPostsResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit:  params.limit === undefined ? undefined : String(params.limit),
                offset: params.offset === undefined ? undefined : String(params.offset),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/companies/${encodeURIComponent(company_id)}/posts`, undefined, {query})
            return await resp.json() as GetPostsResponse
        }

        /**
         * API: Like/unlike a post
         */
        public async likePost(post_id: number): Promise<LikePostResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/posts/${encodeURIComponent(post_id)}/like`)
            return await resp.json() as LikePostResponse
        }

        /**
         * API: Register a new company
         */
        public async registerCompany(params: RegisterCompanyRequest): Promise<RegisterCompanyResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/companies/register`, JSON.stringify(params))
            return await resp.json() as RegisterCompanyResponse
        }

        /**
         * API: Update company (only owner can update)
         */
        public async updateCompany(id: number, params: UpdateCompanyRequest): Promise<UpdateCompanyResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("PUT", `/companies/${encodeURIComponent(id)}`, JSON.stringify(params))
            return await resp.json() as UpdateCompanyResponse
        }

        /**
         * API: Update company profile (only owner can update)
         */
        public async updateCompanyProfile(company_id: number, params: UpdateCompanyProfileRequest): Promise<UpdateCompanyProfileResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("PUT", `/companies/${encodeURIComponent(company_id)}/profile`, JSON.stringify(params))
            return await resp.json() as UpdateCompanyProfileResponse
        }

        /**
         * API: Upload image separately (for markdown editor)
         */
        public async uploadImage(params: UploadImageRequest): Promise<UploadImageResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/companies/upload-image`, JSON.stringify(params))
            return await resp.json() as UploadImageResponse
        }

        /**
         * API: Vote on a company
         */
        public async voteOnCompany(company_id: number, params: VoteOnCompanyRequest): Promise<VoteOnCompanyResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/companies/${encodeURIComponent(company_id)}/vote`, JSON.stringify(params))
            return await resp.json() as VoteOnCompanyResponse
        }
    }
}

export namespace frontend {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.assets = this.assets.bind(this)
        }

        public async assets(path: string[]): Promise<void> {
            await this.baseClient.callTypedAPI("HEAD", `/frontend/${path.map(encodeURIComponent).join("/")}`)
        }
    }
}

export namespace manifesto {
    export interface CreateProposalRequest {
        title: string
        description: string
        "new_content": string
        "author_id": string
        "author_name": string
    }

    export interface ManifestoProposal {
        id: number
        title: string
        description: string
        "new_content": string
        "previous_version_id": number
        "author_id": string
        "author_name": string
        status: "voting" | "approved" | "rejected" | "expired"
        "votes_yes": number
        "votes_no": number
        "votes_abstain": number
        "created_at": string
        "expires_at": string
        "approved_at"?: string
        "rejected_at"?: string
    }

    export interface ManifestoVersion {
        id: number
        "version_number": number
        content: string
        "author_id": string
        "author_name": string
        "created_at": string
        "is_current": boolean
        "proposal_id"?: number
    }

    export interface ManifestoVersionWithTranslations {
        id: number
        "version_number": number
        content: string
        "author_id": string
        "author_name": string
        "created_at": string
        "is_current": boolean
        language?: string
        translations?: { [key: string]: string }
    }

    export interface ProposalWithTranslations {
        id: number
        title: string
        description: string
        "new_content": string
        "author_id": string
        "author_name": string
        status: string
        "votes_yes": number
        "votes_no": number
        "votes_abstain": number
        "created_at": string
        "expires_at": string
        language: string
    }

    export interface VoteRequest {
        "proposal_id": number
        "user_id": string
        "vote_type": "yes" | "no" | "abstain"
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.createProposal = this.createProposal.bind(this)
            this.getCurrent = this.getCurrent.bind(this)
            this.getHistory = this.getHistory.bind(this)
            this.getManifestoWithTranslations = this.getManifestoWithTranslations.bind(this)
            this.getProposal = this.getProposal.bind(this)
            this.getProposalWithTranslations = this.getProposalWithTranslations.bind(this)
            this.getProposals = this.getProposals.bind(this)
            this.getUserVote = this.getUserVote.bind(this)
            this.getVersion = this.getVersion.bind(this)
            this.voteOnProposal = this.voteOnProposal.bind(this)
        }

        /**
         * Create new proposal
         */
        public async createProposal(params: CreateProposalRequest): Promise<{
    proposal: ManifestoProposal
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/manifesto/proposal`, JSON.stringify(params))
            return await resp.json() as {
    proposal: ManifestoProposal
}
        }

        /**
         * Get current manifesto
         */
        public async getCurrent(): Promise<{
    manifesto: ManifestoVersion
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/manifesto/current`)
            return await resp.json() as {
    manifesto: ManifestoVersion
}
        }

        /**
         * Get all versions history
         */
        public async getHistory(): Promise<{
    versions: ManifestoVersion[]
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/manifesto/history`)
            return await resp.json() as {
    versions: ManifestoVersion[]
}
        }

        /**
         * Get manifesto version with translations
         */
        public async getManifestoWithTranslations(id: string, params: {
    language?: string
}): Promise<{
    manifesto: ManifestoVersionWithTranslations
}> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                language: params.language,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/manifesto/${encodeURIComponent(id)}/translations`, undefined, {query})
            return await resp.json() as {
    manifesto: ManifestoVersionWithTranslations
}
        }

        /**
         * Get specific proposal
         */
        public async getProposal(id: string): Promise<{
    proposal: ManifestoProposal
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/manifesto/proposal/${encodeURIComponent(id)}`)
            return await resp.json() as {
    proposal: ManifestoProposal
}
        }

        /**
         * Get proposal with translations
         */
        public async getProposalWithTranslations(id: string, params: {
    language?: string
}): Promise<{
    proposal: ProposalWithTranslations
}> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                language: params.language,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/manifesto/proposal/${encodeURIComponent(id)}/translations`, undefined, {query})
            return await resp.json() as {
    proposal: ProposalWithTranslations
}
        }

        /**
         * Get all proposals
         */
        public async getProposals(params: {
    status?: string
}): Promise<{
    proposals: ManifestoProposal[]
}> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                status: params.status,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/manifesto/proposals`, undefined, {query})
            return await resp.json() as {
    proposals: ManifestoProposal[]
}
        }

        /**
         * Get user's vote for a proposal
         */
        public async getUserVote(proposalId: string, userId: string): Promise<{
    vote: string | null
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/manifesto/vote/${encodeURIComponent(proposalId)}/${encodeURIComponent(userId)}`)
            return await resp.json() as {
    vote: string | null
}
        }

        /**
         * Get specific version
         */
        public async getVersion(id: string): Promise<{
    version: ManifestoVersion
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/manifesto/version/${encodeURIComponent(id)}`)
            return await resp.json() as {
    version: ManifestoVersion
}
        }

        /**
         * Vote on proposal
         */
        public async voteOnProposal(params: VoteRequest): Promise<{
    success: boolean
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/manifesto/vote`, JSON.stringify(params))
            return await resp.json() as {
    success: boolean
}
        }
    }
}

export namespace payments {
    export interface CheckoutResponse {
        checkoutUrl: string
        checkoutId: string
    }

    export interface CreateCheckoutRequest {
        announcementId: number
        amount: number
        userEmail?: string
    }

    export interface Donation {
        id: number
        announcementId: number
        amount: number
        userEmail: string
        anonymizedEmail: string
        userName?: string
        polarOrderId?: string
        status: "pending" | "completed" | "failed"
        createdAt: string
    }

    export interface ListDonationsRequest {
        limit?: number
        offset?: number
    }

    export interface ListDonationsResponse {
        donations: Donation[]
        total: number
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.createCheckout = this.createCheckout.bind(this)
            this.listDonations = this.listDonations.bind(this)
            this.webhook = this.webhook.bind(this)
        }

        /**
         * Creates a Polar checkout session for a donation.
         */
        public async createCheckout(params: CreateCheckoutRequest): Promise<CheckoutResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/payments/checkout`, JSON.stringify(params))
            return await resp.json() as CheckoutResponse
        }

        /**
         * Lists donations for an announcement with anonymized email addresses.
         */
        public async listDonations(announcementId: number, params: ListDonationsRequest): Promise<ListDonationsResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit:  params.limit === undefined ? undefined : String(params.limit),
                offset: params.offset === undefined ? undefined : String(params.offset),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/payments/donations/${encodeURIComponent(announcementId)}`, undefined, {query})
            return await resp.json() as ListDonationsResponse
        }

        /**
         * Raw handler to verify Polar webhook signatures.
         */
        public async webhook(method: "POST", body?: RequestInit["body"], options?: CallParameters): Promise<globalThis.Response> {
            return this.baseClient.callAPI(method, `/payments/webhook`, body, options)
        }
    }
}

export namespace user {
    export interface UserInfo {
        id: string
        email: string | null
        imageUrl: string
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.getMe = this.getMe.bind(this)
        }

        /**
         * Returns the authenticated user's basic profile information.
         */
        public async getMe(): Promise<UserInfo> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/user/me`)
            return await resp.json() as UserInfo
        }
    }
}



function encodeQuery(parts: Record<string, string | string[]>): string {
    const pairs: string[] = []
    for (const key in parts) {
        const val = (Array.isArray(parts[key]) ?  parts[key] : [parts[key]]) as string[]
        for (const v of val) {
            pairs.push(`${key}=${encodeURIComponent(v)}`)
        }
    }
    return pairs.join("&")
}

// makeRecord takes a record and strips any undefined values from it,
// and returns the same record with a narrower type.
// @ts-ignore - TS ignore because makeRecord is not always used
function makeRecord<K extends string | number | symbol, V>(record: Record<K, V | undefined>): Record<K, V> {
    for (const key in record) {
        if (record[key] === undefined) {
            delete record[key]
        }
    }
    return record as Record<K, V>
}

function encodeWebSocketHeaders(headers: Record<string, string>) {
    // url safe, no pad
    const base64encoded = btoa(JSON.stringify(headers))
      .replaceAll("=", "")
      .replaceAll("+", "-")
      .replaceAll("/", "_");
    return "encore.dev.headers." + base64encoded;
}

class WebSocketConnection {
    public ws: WebSocket;

    private hasUpdateHandlers: (() => void)[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        let protocols = ["encore-ws"];
        if (headers) {
            protocols.push(encodeWebSocketHeaders(headers))
        }

        this.ws = new WebSocket(url, protocols)

        this.on("error", () => {
            this.resolveHasUpdateHandlers();
        });

        this.on("close", () => {
            this.resolveHasUpdateHandlers();
        });
    }

    resolveHasUpdateHandlers() {
        const handlers = this.hasUpdateHandlers;
        this.hasUpdateHandlers = [];

        for (const handler of handlers) {
            handler()
        }
    }

    async hasUpdate() {
        // await until a new message have been received, or the socket is closed
        await new Promise((resolve) => {
            this.hasUpdateHandlers.push(() => resolve(null))
        });
    }

    on(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.addEventListener(type, handler);
    }

    off(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.removeEventListener(type, handler);
    }

    close() {
        this.ws.close();
    }
}

export class StreamInOut<Request, Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamIn<Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamOut<Request, Response> {
    public socket: WebSocketConnection;
    private responseValue: Promise<Response>;

    constructor(url: string, headers?: Record<string, string>) {
        let responseResolver: (_: any) => void;
        this.responseValue = new Promise((resolve) => responseResolver = resolve);

        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            responseResolver(JSON.parse(event.data))
        });
    }

    async response(): Promise<Response> {
        return this.responseValue;
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }
}
// CallParameters is the type of the parameters to a method call, but require headers to be a Record type
type CallParameters = Omit<RequestInit, "method" | "body" | "headers"> & {
    /** Headers to be sent with the request */
    headers?: Record<string, string>

    /** Query parameters to be sent with the request */
    query?: Record<string, string | string[]>
}

// AuthDataGenerator is a function that returns a new instance of the authentication data required by this API
export type AuthDataGenerator = () =>
  | auth.AuthParams
  | Promise<auth.AuthParams | undefined>
  | undefined;

// A fetcher is the prototype for the inbuilt Fetch function
export type Fetcher = typeof fetch;

const boundFetch = fetch.bind(this);

class BaseClient {
    readonly baseURL: string
    readonly fetcher: Fetcher
    readonly headers: Record<string, string>
    readonly requestInit: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }
    readonly authGenerator?: AuthDataGenerator

    constructor(baseURL: string, options: ClientOptions) {
        this.baseURL = baseURL
        this.headers = {}

        // Add User-Agent header if the script is running in the server
        // because browsers do not allow setting User-Agent headers to requests
        if (!BROWSER) {
            this.headers["User-Agent"] = "vaquinha-social-frontend-uo9i-Generated-TS-Client (Encore/v1.49.3)";
        }

        this.requestInit = options.requestInit ?? {};

        // Setup what fetch function we'll be using in the base client
        if (options.fetcher !== undefined) {
            this.fetcher = options.fetcher
        } else {
            this.fetcher = boundFetch
        }

        // Setup an authentication data generator using the auth data token option
        if (options.auth !== undefined) {
            const auth = options.auth
            if (typeof auth === "function") {
                this.authGenerator = auth
            } else {
                this.authGenerator = () => auth
            }
        }
    }

    async getAuthData(): Promise<CallParameters | undefined> {
        let authData: auth.AuthParams | undefined;

        // If authorization data generator is present, call it and add the returned data to the request
        if (this.authGenerator) {
            const mayBePromise = this.authGenerator();
            if (mayBePromise instanceof Promise) {
                authData = await mayBePromise;
            } else {
                authData = mayBePromise;
            }
        }

        if (authData) {
            const data: CallParameters = {};

            data.headers = makeRecord<string, string>({
                authorization: authData.authorization,
            });

            return data;
        }

        return undefined;
    }

    // createStreamInOut sets up a stream to a streaming API endpoint.
    async createStreamInOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamInOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamInOut(this.baseURL + path + queryString, headers);
    }

    // createStreamIn sets up a stream to a streaming API endpoint.
    async createStreamIn<Response>(path: string, params?: CallParameters): Promise<StreamIn<Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamIn(this.baseURL + path + queryString, headers);
    }

    // createStreamOut sets up a stream to a streaming API endpoint.
    async createStreamOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamOut(this.baseURL + path + queryString, headers);
    }

    // callTypedAPI makes an API call, defaulting content type to "application/json"
    public async callTypedAPI(method: string, path: string, body?: RequestInit["body"], params?: CallParameters): Promise<Response> {
        return this.callAPI(method, path, body, {
            ...params,
            headers: { "Content-Type": "application/json", ...params?.headers }
        });
    }

    // callAPI is used by each generated API method to actually make the request
    public async callAPI(method: string, path: string, body?: RequestInit["body"], params?: CallParameters): Promise<Response> {
        let { query, headers, ...rest } = params ?? {}
        const init = {
            ...this.requestInit,
            ...rest,
            method,
            body: body ?? null,
        }

        // Merge our headers with any predefined headers
        init.headers = {...this.headers, ...init.headers, ...headers}

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                init.headers = {...init.headers, ...authData.headers};
            }
        }

        // Make the actual request
        const queryString = query ? '?' + encodeQuery(query) : ''
        const response = await this.fetcher(this.baseURL+path+queryString, init)

        // handle any error responses
        if (!response.ok) {
            // try and get the error message from the response body
            let body: APIErrorResponse = { code: ErrCode.Unknown, message: `request failed: status ${response.status}` }

            // if we can get the structured error we should, otherwise give a best effort
            try {
                const text = await response.text()

                try {
                    const jsonBody = JSON.parse(text)
                    if (isAPIErrorResponse(jsonBody)) {
                        body = jsonBody
                    } else {
                        body.message += ": " + JSON.stringify(jsonBody)
                    }
                } catch {
                    body.message += ": " + text
                }
            } catch (e) {
                // otherwise we just append the text to the error message
                body.message += ": " + String(e)
            }

            throw new APIError(response.status, body)
        }

        return response
    }
}

/**
 * APIErrorDetails represents the response from an Encore API in the case of an error
 */
interface APIErrorResponse {
    code: ErrCode
    message: string
    details?: any
}

function isAPIErrorResponse(err: any): err is APIErrorResponse {
    return (
        err !== undefined && err !== null &&
        isErrCode(err.code) &&
        typeof(err.message) === "string" &&
        (err.details === undefined || err.details === null || typeof(err.details) === "object")
    )
}

function isErrCode(code: any): code is ErrCode {
    return code !== undefined && Object.values(ErrCode).includes(code)
}

/**
 * APIError represents a structured error as returned from an Encore application.
 */
export class APIError extends Error {
    /**
     * The HTTP status code associated with the error.
     */
    public readonly status: number

    /**
     * The Encore error code
     */
    public readonly code: ErrCode

    /**
     * The error details
     */
    public readonly details?: any

    constructor(status: number, response: APIErrorResponse) {
        // extending errors causes issues after you construct them, unless you apply the following fixes
        super(response.message);

        // set error name as constructor name, make it not enumerable to keep native Error behavior
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target#new.target_in_constructors
        Object.defineProperty(this, 'name', {
            value:        'APIError',
            enumerable:   false,
            configurable: true,
        })

        // fix the prototype chain
        if ((Object as any).setPrototypeOf == undefined) {
            (this as any).__proto__ = APIError.prototype
        } else {
            Object.setPrototypeOf(this, APIError.prototype);
        }

        // capture a stack trace
        if ((Error as any).captureStackTrace !== undefined) {
            (Error as any).captureStackTrace(this, this.constructor);
        }

        this.status = status
        this.code = response.code
        this.details = response.details
    }
}

/**
 * Typeguard allowing use of an APIError's fields'
 */
export function isAPIError(err: any): err is APIError {
    return err instanceof APIError;
}

export enum ErrCode {
    /**
     * OK indicates the operation was successful.
     */
    OK = "ok",

    /**
     * Canceled indicates the operation was canceled (typically by the caller).
     *
     * Encore will generate this error code when cancellation is requested.
     */
    Canceled = "canceled",

    /**
     * Unknown error. An example of where this error may be returned is
     * if a Status value received from another address space belongs to
     * an error-space that is not known in this address space. Also
     * errors raised by APIs that do not return enough error information
     * may be converted to this error.
     *
     * Encore will generate this error code in the above two mentioned cases.
     */
    Unknown = "unknown",

    /**
     * InvalidArgument indicates client specified an invalid argument.
     * Note that this differs from FailedPrecondition. It indicates arguments
     * that are problematic regardless of the state of the system
     * (e.g., a malformed file name).
     *
     * This error code will not be generated by the gRPC framework.
     */
    InvalidArgument = "invalid_argument",

    /**
     * DeadlineExceeded means operation expired before completion.
     * For operations that change the state of the system, this error may be
     * returned even if the operation has completed successfully. For
     * example, a successful response from a server could have been delayed
     * long enough for the deadline to expire.
     *
     * The gRPC framework will generate this error code when the deadline is
     * exceeded.
     */
    DeadlineExceeded = "deadline_exceeded",

    /**
     * NotFound means some requested entity (e.g., file or directory) was
     * not found.
     *
     * This error code will not be generated by the gRPC framework.
     */
    NotFound = "not_found",

    /**
     * AlreadyExists means an attempt to create an entity failed because one
     * already exists.
     *
     * This error code will not be generated by the gRPC framework.
     */
    AlreadyExists = "already_exists",

    /**
     * PermissionDenied indicates the caller does not have permission to
     * execute the specified operation. It must not be used for rejections
     * caused by exhausting some resource (use ResourceExhausted
     * instead for those errors). It must not be
     * used if the caller cannot be identified (use Unauthenticated
     * instead for those errors).
     *
     * This error code will not be generated by the gRPC core framework,
     * but expect authentication middleware to use it.
     */
    PermissionDenied = "permission_denied",

    /**
     * ResourceExhausted indicates some resource has been exhausted, perhaps
     * a per-user quota, or perhaps the entire file system is out of space.
     *
     * This error code will be generated by the gRPC framework in
     * out-of-memory and server overload situations, or when a message is
     * larger than the configured maximum size.
     */
    ResourceExhausted = "resource_exhausted",

    /**
     * FailedPrecondition indicates operation was rejected because the
     * system is not in a state required for the operation's execution.
     * For example, directory to be deleted may be non-empty, an rmdir
     * operation is applied to a non-directory, etc.
     *
     * A litmus test that may help a service implementor in deciding
     * between FailedPrecondition, Aborted, and Unavailable:
     *  (a) Use Unavailable if the client can retry just the failing call.
     *  (b) Use Aborted if the client should retry at a higher-level
     *      (e.g., restarting a read-modify-write sequence).
     *  (c) Use FailedPrecondition if the client should not retry until
     *      the system state has been explicitly fixed. E.g., if an "rmdir"
     *      fails because the directory is non-empty, FailedPrecondition
     *      should be returned since the client should not retry unless
     *      they have first fixed up the directory by deleting files from it.
     *  (d) Use FailedPrecondition if the client performs conditional
     *      REST Get/Update/Delete on a resource and the resource on the
     *      server does not match the condition. E.g., conflicting
     *      read-modify-write on the same resource.
     *
     * This error code will not be generated by the gRPC framework.
     */
    FailedPrecondition = "failed_precondition",

    /**
     * Aborted indicates the operation was aborted, typically due to a
     * concurrency issue like sequencer check failures, transaction aborts,
     * etc.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     */
    Aborted = "aborted",

    /**
     * OutOfRange means operation was attempted past the valid range.
     * E.g., seeking or reading past end of file.
     *
     * Unlike InvalidArgument, this error indicates a problem that may
     * be fixed if the system state changes. For example, a 32-bit file
     * system will generate InvalidArgument if asked to read at an
     * offset that is not in the range [0,2^32-1], but it will generate
     * OutOfRange if asked to read from an offset past the current
     * file size.
     *
     * There is a fair bit of overlap between FailedPrecondition and
     * OutOfRange. We recommend using OutOfRange (the more specific
     * error) when it applies so that callers who are iterating through
     * a space can easily look for an OutOfRange error to detect when
     * they are done.
     *
     * This error code will not be generated by the gRPC framework.
     */
    OutOfRange = "out_of_range",

    /**
     * Unimplemented indicates operation is not implemented or not
     * supported/enabled in this service.
     *
     * This error code will be generated by the gRPC framework. Most
     * commonly, you will see this error code when a method implementation
     * is missing on the server. It can also be generated for unknown
     * compression algorithms or a disagreement as to whether an RPC should
     * be streaming.
     */
    Unimplemented = "unimplemented",

    /**
     * Internal errors. Means some invariants expected by underlying
     * system has been broken. If you see one of these errors,
     * something is very broken.
     *
     * This error code will be generated by the gRPC framework in several
     * internal error conditions.
     */
    Internal = "internal",

    /**
     * Unavailable indicates the service is currently unavailable.
     * This is a most likely a transient condition and may be corrected
     * by retrying with a backoff. Note that it is not always safe to retry
     * non-idempotent operations.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     *
     * This error code will be generated by the gRPC framework during
     * abrupt shutdown of a server process or network connection.
     */
    Unavailable = "unavailable",

    /**
     * DataLoss indicates unrecoverable data loss or corruption.
     *
     * This error code will not be generated by the gRPC framework.
     */
    DataLoss = "data_loss",

    /**
     * Unauthenticated indicates the request does not have valid
     * authentication credentials for the operation.
     *
     * The gRPC framework will generate this error code when the
     * authentication metadata is invalid or a Credentials callback fails,
     * but also expect authentication middleware to generate it.
     */
    Unauthenticated = "unauthenticated",
}
